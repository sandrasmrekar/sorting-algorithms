{"version":3,"sources":["algorithms/BubbelSort.js","algorithms/HeapSort.js","constants.js","algorithms/MergeSort.js","components/Nav.js","algorithms/QuickSort.js","components/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["array_length","bubbleSort","inputArr","animations","swapped","len","length","i","tmp","push","DIMENTIONS","window","innerWidth","innerHeight","COLORS","getHeapSortAnimations","array","input","Math","floor","heap_root","swap","heapSort","left","right","max","index_A","index_B","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","j","doMerge","Nav","onQuickSort","onMergeSort","onReset","isRunning","onHeapSort","onBubbelSort","onValueChange","barValue","useState","value","setValue","className","onClick","disabled","Typography","id","gutterBottom","Slider","onChange","e","sliderValue","style","width","step","min","getQuickSortAnimations","quickSort","items","leftIndex","rightIndex","index","pivot","partition","SortingVisualizer","props","state","color","run","animationSpeed","barWidth","nbrOfBars","this","resetArray","setState","prevProps","prevState","random","done","arrayBars","document","getElementsByClassName","isColorChange","setTimeout","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","backgroundColor","newHeight","height","value1","value2","count","barOneId","height1","barTwoId","height2","getBubbelSortAnimations","target","children","mergeSort","handleSlider","map","idx","onMouseEnter","showValue","onMouseLeave","hideValue","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc35788d.chunk.js","sourcesContent":["export function getBubbelSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSort(array, animations);\n  animations.push([\"done\"]);\n\n  return animations;\n}\n\nconst bubbleSort = (inputArr, animations) => {\n  var len = inputArr.length;\n  var swapped;\n  do {\n    swapped = false;\n    for (var i = 0; i < len; i++) {\n      if (inputArr[i] > inputArr[i + 1]) {\n        var tmp = inputArr[i];\n        animations.push([i, inputArr[i], i + 1, inputArr[i + 1], 1]);\n        animations.push([i, inputArr[i], i + 1, inputArr[i + 1], 2]);\n        inputArr[i] = inputArr[i + 1];\n        inputArr[i + 1] = tmp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return inputArr;\n};\n","var array_length;\n\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  heapSort(array, animations);\n  animations.push([\"done\"]);\n  return animations;\n}\n\n/* to create MAX  array */\nfunction heap_root(input, i, animations) {\n  var left = 2 * i + 1;\n  var right = 2 * i + 2;\n  var max = i;\n\n  if (left < array_length && input[left] > input[max]) {\n    max = left;\n  }\n\n  if (right < array_length && input[right] > input[max]) {\n    max = right;\n  }\n\n  if (max !== i) {\n    swap(input, i, max, animations);\n    heap_root(input, max, animations);\n  }\n}\n\nfunction swap(input, index_A, index_B, animations) {\n  animations.push([index_A, input[index_A], index_B, input[index_B], 1]);\n  animations.push([index_A, input[index_A], index_B, input[index_B], 2]);\n  var temp = input[index_A];\n  input[index_A] = input[index_B];\n  input[index_B] = temp;\n}\n\nfunction heapSort(input, animations) {\n  array_length = input.length;\n\n  for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\n    heap_root(input, i, animations);\n  }\n\n  for (i = input.length - 1; i > 0; i--) {\n    swap(input, 0, i, animations);\n    array_length--;\n\n    heap_root(input, 0, animations);\n  }\n}\n","export const DIMENTIONS = {\n  WINDOW_WIDTH: window.innerWidth,\n  WINDOW_HEIGHT: window.innerHeight,\n};\n\nexport const COLORS = {\n  PRIMARY_COLOR: \"#6200ee\",\n\n  SECONDARY_COLOR: \"#de354c\",\n\n  PIVOT_COLOR: \"yellow\",\n\n  DONE_COLOR: \"#14a76c\",\n};\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  animations.push([\"done\"]);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React, { useState } from \"react\";\nimport { Slider, Typography } from \"@material-ui/core\";\n// or\nexport default function Nav({\n  onQuickSort,\n  onMergeSort,\n  onReset,\n  isRunning,\n  onHeapSort,\n  onBubbelSort,\n  onValueChange,\n  barValue,\n}) {\n  const [value, setValue] = useState(10);\n  const handleChange = (sliderValue) => {\n    setValue(sliderValue);\n    onValueChange(sliderValue);\n  };\n  return (\n    <header>\n      <div className=\"row\">\n        <button onClick={onMergeSort} disabled={isRunning}>\n          Merge Sort\n        </button>\n        <button onClick={onQuickSort} disabled={isRunning}>\n          Quicke Sort\n        </button>\n        <button onClick={onHeapSort} disabled={isRunning}>\n          Heap Sort\n        </button>\n        <button onClick={onBubbelSort} disabled={isRunning}>\n          Bubble Sort\n        </button>\n        <button onClick={onReset} disabled={isRunning}>\n          New Array\n        </button>\n        <h1>{barValue}</h1>\n      </div>\n      <Typography id=\"discrete-slider-small-steps\" gutterBottom>\n        Change Animations speed and numbers of bars\n      </Typography>\n      <Slider\n        onChange={(e, value) => handleChange(value)}\n        style={{ width: \"10%\" }}\n        disabled={isRunning}\n        value={value}\n        max={100}\n        step={2}\n        min={1}\n      />\n      <div className=\"line\" />\n    </header>\n  );\n}\n","export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSort(array, 0, array.length - 1, animations);\n  animations.push([\"done\"]);\n  return animations;\n}\n\nfunction swap(items, leftIndex, rightIndex, animations) {\n  animations.push([\n    leftIndex,\n    items[leftIndex],\n    rightIndex,\n    items[rightIndex],\n    1,\n  ]);\n  animations.push([\n    leftIndex,\n    items[leftIndex],\n    rightIndex,\n    items[rightIndex],\n    2,\n  ]);\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\n\nfunction partition(items, left, right, animations) {\n  var pivot = items[Math.floor((right + left) / 2)]; //middle element\n  var i = left; //left pointer\n  var j = right; //right pointer\n  animations.push([\"pivot\", Math.floor((right + left) / 2), 1]);\n  animations.push([\"pivot\", Math.floor((right + left) / 2), 2]);\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n    while (items[j] > pivot) {\n      j--;\n    }\n    if (i <= j) {\n      swap(items, i, j, animations); //sawpping two elements\n      i++;\n      j--;\n    }\n  }\n  return i;\n}\n\nfunction quickSort(items, left, right, animations) {\n  var index;\n  if (items.length > 1) {\n    index = partition(items, left, right, animations); //index returned from partition\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1, animations);\n    }\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right, animations);\n    }\n  }\n  return items;\n}\n","import React from \"react\";\nimport { getBubbelSortAnimations } from \"../algorithms/BubbelSort\";\nimport { COLORS, DIMENTIONS } from \"../constants\";\nimport { getHeapSortAnimations } from \"../algorithms/HeapSort\";\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\nimport Nav from \"./Nav\";\nimport { getQuickSortAnimations } from \"../algorithms/QuickSort\";\nimport \"./SortingVisualizer.css\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      color: COLORS.PRIMARY_COLOR,\n      run: false,\n      barValue: null,\n      animationSpeed: 10,\n      barWidth: null,\n      nbrOfBars: DIMENTIONS.WINDOW_WIDTH / 20,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n    const nbrOfBars =\n      ((10 - 1) / (100 - 1)) * (DIMENTIONS.WINDOW_WIDTH / 20 - 4) + 4;\n    const barWidth = 100 / (10 / 3) + 5;\n    this.setState({ nbrOfBars, barWidth });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.nbrOfBars !== this.state.nbrOfBars) {\n      this.resetArray();\n    }\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.nbrOfBars; i++) {\n      array.push(randomIntFromInterval(5, DIMENTIONS.WINDOW_HEIGHT - 200));\n    }\n    this.setState({ array });\n    this.setState({ color: COLORS.PRIMARY_COLOR, done: false });\n  }\n\n  mergeSort() {\n    this.setState({ run: true });\n    const animations = getMergeSortAnimations(this.state.array.slice(0));\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2; // every third is 2\n      const [value1] = animations[i];\n      if (value1 === \"done\") {\n        setTimeout(() => {\n          this.setState({ run: false, color: COLORS.DONE_COLOR });\n        }, i * this.state.animationSpeed);\n      } else if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color =\n          i % 3 === 0 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  quickSort() {\n    this.setState({ run: true });\n    const animations = getQuickSortAnimations(this.state.array.slice(0));\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const [value1, value2, count] = animations[i];\n      if (value1 === \"done\") {\n        setTimeout(() => {\n          this.setState({ color: COLORS.DONE_COLOR });\n          this.setState({ run: false });\n        }, i * this.state.animationSpeed);\n      } else if (value1 === \"pivot\") {\n        setTimeout(() => {\n          const color = count === 1 ? COLORS.PIVOT_COLOR : COLORS.PRIMARY_COLOR;\n          const barPivotStyle = arrayBars[value2].style;\n          barPivotStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n      } else {\n        const [barOneId, height1, barTwoId, height2, count] = animations[i];\n        const barOneStyle = arrayBars[barOneId].style;\n        const barTwoStyle = arrayBars[barTwoId].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          barTwoStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          if (count === 2) {\n            barOneStyle.height = `${height2}px`;\n            barTwoStyle.height = `${height1}px`;\n          }\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  heapSort() {\n    this.setState({ run: true });\n    const animations = getHeapSortAnimations(this.state.array.slice(0));\n    for (let i = 0; i < animations.length; i++) {\n      const [value1] = animations[i];\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      if (value1 === \"done\") {\n        setTimeout(() => {\n          this.setState({ color: COLORS.DONE_COLOR });\n          this.setState({ run: false });\n        }, i * this.state.animationSpeed);\n      } else {\n        const [barOneId, height1, barTwoId, height2, count] = animations[i];\n        const barOneStyle = arrayBars[barOneId].style;\n        const barTwoStyle = arrayBars[barTwoId].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          barTwoStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          if (count === 2) {\n            barOneStyle.height = `${height2}px`;\n            barTwoStyle.height = `${height1}px`;\n          }\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.setState({ run: true });\n    const animations = getBubbelSortAnimations(this.state.array.slice(0));\n    for (let i = 0; i < animations.length; i++) {\n      const [value1] = animations[i];\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      if (value1 === \"done\") {\n        setTimeout(() => {\n          this.setState({ color: COLORS.DONE_COLOR });\n          this.setState({ run: false });\n        }, i * this.state.animationSpeed);\n      } else {\n        const [barOneId, height1, barTwoId, height2, count] = animations[i];\n        const barOneStyle = arrayBars[barOneId].style;\n        const barTwoStyle = arrayBars[barTwoId].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          barTwoStyle.backgroundColor =\n            count === 1 ? COLORS.SECONDARY_COLOR : COLORS.PRIMARY_COLOR;\n          if (count === 2) {\n            barOneStyle.height = `${height2}px`;\n            barTwoStyle.height = `${height1}px`;\n          }\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  showValue(value) {\n    this.setState({\n      barValue:\n        // hovering on div parent           hovering on child element\n        value.target.style.height || value.target.children[0].style.height,\n    });\n  }\n\n  hideValue() {\n    this.setState({ barValue: null });\n  }\n\n  handleSlider(value) {\n    // Transforming animations speed. (Trial and error)\n    var animationSpeed = 120 - value;\n    animationSpeed =\n      value > 50 ? animationSpeed - (value * 2) / 10 : animationSpeed;\n\n    // Transforming value into other number range from min = 4    max = WINDOW_WIDTH / 20\n    const nbrOfBars =\n      ((value - 1) / (100 - 1)) * (DIMENTIONS.WINDOW_WIDTH / 20 - 4) + 4;\n\n    // Changing barwidth depending on curent value\n    const barWidth = 100 / (value / 3) + 5; // should 60 / (value / 2) + 5;\n\n    this.setState({ nbrOfBars, barWidth, animationSpeed });\n  }\n\n  render() {\n    const { array, barWidth } = this.state;\n    return (\n      <div>\n        <Nav\n          onReset={() => this.resetArray()}\n          onQuickSort={() => this.quickSort()}\n          onMergeSort={() => {\n            this.mergeSort();\n          }}\n          onHeapSort={() => this.heapSort()}\n          onBubbelSort={() => this.bubbleSort()}\n          isRunning={this.state.run}\n          barValue={this.state.barValue}\n          onValueChange={(value) => this.handleSlider(value)}\n        />\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar-box\"\n              onMouseEnter={(e) => this.showValue(e)}\n              onMouseLeave={() => this.hideValue()}\n              key={idx}\n            >\n              <div\n                className=\"array-bar\"\n                style={{\n                  backgroundColor: this.state.color,\n                  height: `${value}px`,\n                  width: `${barWidth}px`,\n                }}\n              ></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import \"./App.css\";\nimport SortingVisualizer from \"./components/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}